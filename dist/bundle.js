(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var init = function init() {
	var audio = new Audio();
	audio.src = '../../assets/audio/i-built-utopia.mp3';
	audio.controls = true;
	document.body.append(audio);

	var context = new (window.AudioContext || window.webkitAudioContext)();
	var analyser = context.createAnalyser();

	window.addEventListener('load', function () {
		var source = context.createMediaElementSource(audio);
		source.connect(analyser);
		analyser.connect(context.destination);
	}, false);

	var canvas = document.getElementById('canvas');
	canvas.height = 400;
	canvas.width = 400;
	var canvasCtx = canvas.getContext('2d');

	analyser.fftSize = 1024; // size of Fast Fourier Transform used to get frequency domain data (determines window size)
	var bufferLength = analyser.frequencyBinCount; // half the fftSize - the number of data points available for visualization
	// buffer is the asset in memory that holds audio data
	var dataArray = new Uint8Array(bufferLength); // an array of unsigned integers the length of frequencyBinCount
	console.log('dataArray: ', dataArray);

	// timeDomain(canvas, canvasCtx, analyser, bufferLength, dataArray);
	frequencyDomain(canvas, canvasCtx, analyser, bufferLength, dataArray);
};

var timeDomain = function timeDomain(canvas, canvasCtx, analyser, bufferLength, dataArray) {

	var draw = function draw() {
		requestAnimationFrame(draw);

		analyser.getByteTimeDomainData(dataArray); // Copies the current frequency data into the unsigned byte array (Uint8Array) passed in
		console.log('dataArray: ', dataArray);

		canvasCtx.fillStyle = 'rgb(200, 200, 200)';
		canvasCtx.fillRect(0, 0, canvas.width, canvas.height);

		canvasCtx.lineWidth = 2;
		canvasCtx.strokeStyle = 'rgb(0, 0, 0)'; // this could increment to change the color of the line as they progress

		var sliceWidth = canvas.width * 1.0 / bufferLength;
		var x = 0;

		for (var i = 0; i < bufferLength; i++) {
			var v = dataArray[i] / 128.0;
			var y = v * canvas.height / 2;

			if (i === 0) {
				canvasCtx.moveTo(x, y);
			} else {
				canvasCtx.lineTo(x, y);
			}

			x += sliceWidth;
		}

		canvasCtx.lineTo(canvas.width, canvas.height / 2);
		canvasCtx.stroke();
	};

	draw();
};

var frequencyDomain = function frequencyDomain(canvas, canvasCtx, analyser, bufferLength, dataArray) {
	// console.log('dataArray: ', dataArray);
	// analyser.minDecibels = -90;
	// analyser.maxDecibels = -10;

	canvasCtx.clearRect(0, 0, canvas.width, canvas.height);

	var draw = function draw() {
		requestAnimationFrame(draw);

		analyser.getByteFrequencyData(dataArray); // Copies the current frequency data into the unsigned byte array (Uint8Array) passed in

		// this happens every frame. The dataArray updates with the set of frequency data for each sample frame, at each point in time
		// We would want to provide a stream of this data to Leaflet/d3contour in order to get a map that redraws each frame as the song/animation progresses in time
		console.log('dataArray: ', dataArray);

		canvasCtx.fillStyle = 'rgb(253, 197, 190)';
		canvasCtx.fillRect(0, 0, canvas.width, canvas.height);

		var barWidth = canvas.width / bufferLength * 2.5 - 1; // bar width calculated as a ratio of canvas width / number of data points (frequency data);
		var barHeight = void 0;
		var x = 0;

		// This loop redraws the canvas in each animation frame
		// Instead of drawing, we want to visualize the data via d3, but we likely still want to use requestAnimationFrame in order to make a visualization that changes over time
		for (var i = 0; i < bufferLength; i++) {
			barHeight = dataArray[i]; // barHeight === frequency data point

			canvasCtx.fillStyle = 'rgb(' + barHeight + ', 140, 140)'; // style based on barheight
			canvasCtx.fillRect(x, canvas.height - barHeight / 2, barWidth, barHeight / 2);

			x += barWidth;
		}
	};

	draw();
};

init();

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLElBQU0sT0FBTyxTQUFQLElBQU8sR0FBTTtBQUNsQixLQUFNLFFBQVEsSUFBSSxLQUFKLEVBQWQ7QUFDQSxPQUFNLEdBQU4sR0FBWSx1Q0FBWjtBQUNBLE9BQU0sUUFBTixHQUFpQixJQUFqQjtBQUNBLFVBQVMsSUFBVCxDQUFjLE1BQWQsQ0FBcUIsS0FBckI7O0FBRUEsS0FBSSxVQUFVLEtBQUssT0FBTyxZQUFQLElBQXVCLE9BQU8sa0JBQW5DLEdBQWQ7QUFDQSxLQUFJLFdBQVcsUUFBUSxjQUFSLEVBQWY7O0FBRUEsUUFBTyxnQkFBUCxDQUF3QixNQUF4QixFQUFnQyxZQUFNO0FBQ3RDLE1BQUksU0FBUyxRQUFRLHdCQUFSLENBQWlDLEtBQWpDLENBQWI7QUFDQSxTQUFPLE9BQVAsQ0FBZSxRQUFmO0FBQ0EsV0FBUyxPQUFULENBQWlCLFFBQVEsV0FBekI7QUFDQSxFQUpBLEVBSUUsS0FKRjs7QUFNQSxLQUFNLFNBQVMsU0FBUyxjQUFULENBQXdCLFFBQXhCLENBQWY7QUFDQSxRQUFPLE1BQVAsR0FBZ0IsR0FBaEI7QUFDQSxRQUFPLEtBQVAsR0FBZSxHQUFmO0FBQ0EsS0FBTSxZQUFZLE9BQU8sVUFBUCxDQUFrQixJQUFsQixDQUFsQjs7QUFFQSxVQUFTLE9BQVQsR0FBbUIsSUFBbkIsQ0FwQmtCLENBb0JPO0FBQ3pCLEtBQUksZUFBZSxTQUFTLGlCQUE1QixDQXJCa0IsQ0FxQjZCO0FBQy9DO0FBQ0EsS0FBSSxZQUFZLElBQUksVUFBSixDQUFlLFlBQWYsQ0FBaEIsQ0F2QmtCLENBdUI0QjtBQUM5QyxTQUFRLEdBQVIsQ0FBWSxhQUFaLEVBQTJCLFNBQTNCOztBQUVBO0FBQ0EsaUJBQWdCLE1BQWhCLEVBQXdCLFNBQXhCLEVBQW1DLFFBQW5DLEVBQTZDLFlBQTdDLEVBQTJELFNBQTNEO0FBQ0EsQ0E1QkQ7O0FBOEJBLElBQU0sYUFBYSxTQUFiLFVBQWEsQ0FBQyxNQUFELEVBQVMsU0FBVCxFQUFvQixRQUFwQixFQUE4QixZQUE5QixFQUE0QyxTQUE1QyxFQUEwRDs7QUFFNUUsS0FBTSxPQUFPLFNBQVAsSUFBTyxHQUFNO0FBQ2xCLHdCQUFzQixJQUF0Qjs7QUFFQSxXQUFTLHFCQUFULENBQStCLFNBQS9CLEVBSGtCLENBR3lCO0FBQzNDLFVBQVEsR0FBUixDQUFZLGFBQVosRUFBMkIsU0FBM0I7O0FBRUEsWUFBVSxTQUFWLEdBQXNCLG9CQUF0QjtBQUNBLFlBQVUsUUFBVixDQUFtQixDQUFuQixFQUFzQixDQUF0QixFQUF5QixPQUFPLEtBQWhDLEVBQXVDLE9BQU8sTUFBOUM7O0FBRUEsWUFBVSxTQUFWLEdBQXNCLENBQXRCO0FBQ0EsWUFBVSxXQUFWLEdBQXdCLGNBQXhCLENBVmtCLENBVXNCOztBQUV4QyxNQUFJLGFBQWEsT0FBTyxLQUFQLEdBQWUsR0FBZixHQUFxQixZQUF0QztBQUNBLE1BQUksSUFBSSxDQUFSOztBQUVBLE9BQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxZQUFwQixFQUFrQyxHQUFsQyxFQUF1QztBQUN0QyxPQUFJLElBQUksVUFBVSxDQUFWLElBQWUsS0FBdkI7QUFDQSxPQUFJLElBQUksSUFBSSxPQUFPLE1BQVgsR0FBb0IsQ0FBNUI7O0FBRUEsT0FBSSxNQUFNLENBQVYsRUFBYTtBQUNaLGNBQVUsTUFBVixDQUFpQixDQUFqQixFQUFvQixDQUFwQjtBQUNBLElBRkQsTUFFTztBQUNOLGNBQVUsTUFBVixDQUFpQixDQUFqQixFQUFvQixDQUFwQjtBQUNBOztBQUVELFFBQUssVUFBTDtBQUNBOztBQUVELFlBQVUsTUFBVixDQUFpQixPQUFPLEtBQXhCLEVBQStCLE9BQU8sTUFBUCxHQUFnQixDQUEvQztBQUNBLFlBQVUsTUFBVjtBQUNBLEVBOUJEOztBQWdDQTtBQUVBLENBcENEOztBQXNDQSxJQUFNLGtCQUFrQixTQUFsQixlQUFrQixDQUFDLE1BQUQsRUFBUyxTQUFULEVBQW9CLFFBQXBCLEVBQThCLFlBQTlCLEVBQTRDLFNBQTVDLEVBQTBEO0FBQ2pGO0FBQ0E7QUFDQTs7QUFFQSxXQUFVLFNBQVYsQ0FBb0IsQ0FBcEIsRUFBdUIsQ0FBdkIsRUFBMEIsT0FBTyxLQUFqQyxFQUF3QyxPQUFPLE1BQS9DOztBQUVBLEtBQU0sT0FBTyxTQUFQLElBQU8sR0FBTTtBQUNsQix3QkFBc0IsSUFBdEI7O0FBRUEsV0FBUyxvQkFBVCxDQUE4QixTQUE5QixFQUhrQixDQUd3Qjs7QUFFMUM7QUFDQTtBQUNBLFVBQVEsR0FBUixDQUFZLGFBQVosRUFBMkIsU0FBM0I7O0FBRUEsWUFBVSxTQUFWLEdBQXNCLG9CQUF0QjtBQUNBLFlBQVUsUUFBVixDQUFtQixDQUFuQixFQUFzQixDQUF0QixFQUF5QixPQUFPLEtBQWhDLEVBQXVDLE9BQU8sTUFBOUM7O0FBRUEsTUFBSSxXQUFZLE9BQU8sS0FBUCxHQUFlLFlBQWhCLEdBQWdDLEdBQWhDLEdBQXNDLENBQXJELENBWmtCLENBWXNDO0FBQ3hELE1BQUksa0JBQUo7QUFDQSxNQUFJLElBQUksQ0FBUjs7QUFFQTtBQUNBO0FBQ0EsT0FBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLFlBQXBCLEVBQWtDLEdBQWxDLEVBQXVDO0FBQ3RDLGVBQVksVUFBVSxDQUFWLENBQVosQ0FEc0MsQ0FDWjs7QUFFMUIsYUFBVSxTQUFWLEdBQXNCLFNBQVMsU0FBVCxHQUFxQixhQUEzQyxDQUhzQyxDQUdvQjtBQUMxRCxhQUFVLFFBQVYsQ0FBbUIsQ0FBbkIsRUFBc0IsT0FBTyxNQUFQLEdBQWdCLFlBQVksQ0FBbEQsRUFBcUQsUUFBckQsRUFBK0QsWUFBWSxDQUEzRTs7QUFFQSxRQUFLLFFBQUw7QUFDQTtBQUNELEVBMUJEOztBQTRCQTtBQUVBLENBckNEOztBQXVDQSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiY29uc3QgaW5pdCA9ICgpID0+IHtcblx0Y29uc3QgYXVkaW8gPSBuZXcgQXVkaW8oKTtcblx0YXVkaW8uc3JjID0gJy4uLy4uL2Fzc2V0cy9hdWRpby9pLWJ1aWx0LXV0b3BpYS5tcDMnO1xuXHRhdWRpby5jb250cm9scyA9IHRydWU7XG5cdGRvY3VtZW50LmJvZHkuYXBwZW5kKGF1ZGlvKTtcblxuXHRsZXQgY29udGV4dCA9IG5ldyAod2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0KSgpO1xuXHRsZXQgYW5hbHlzZXIgPSBjb250ZXh0LmNyZWF0ZUFuYWx5c2VyKCk7XG5cblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG5cdGxldCBzb3VyY2UgPSBjb250ZXh0LmNyZWF0ZU1lZGlhRWxlbWVudFNvdXJjZShhdWRpbyk7XG5cdHNvdXJjZS5jb25uZWN0KGFuYWx5c2VyKTtcblx0YW5hbHlzZXIuY29ubmVjdChjb250ZXh0LmRlc3RpbmF0aW9uKTtcbn0sIGZhbHNlKTtcblxuXHRjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzJyk7XG5cdGNhbnZhcy5oZWlnaHQgPSA0MDA7XG5cdGNhbnZhcy53aWR0aCA9IDQwMDtcblx0Y29uc3QgY2FudmFzQ3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cblx0YW5hbHlzZXIuZmZ0U2l6ZSA9IDEwMjQ7IC8vIHNpemUgb2YgRmFzdCBGb3VyaWVyIFRyYW5zZm9ybSB1c2VkIHRvIGdldCBmcmVxdWVuY3kgZG9tYWluIGRhdGEgKGRldGVybWluZXMgd2luZG93IHNpemUpXG5cdGxldCBidWZmZXJMZW5ndGggPSBhbmFseXNlci5mcmVxdWVuY3lCaW5Db3VudDsgLy8gaGFsZiB0aGUgZmZ0U2l6ZSAtIHRoZSBudW1iZXIgb2YgZGF0YSBwb2ludHMgYXZhaWxhYmxlIGZvciB2aXN1YWxpemF0aW9uXG5cdC8vIGJ1ZmZlciBpcyB0aGUgYXNzZXQgaW4gbWVtb3J5IHRoYXQgaG9sZHMgYXVkaW8gZGF0YVxuXHRsZXQgZGF0YUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyTGVuZ3RoKTsgLy8gYW4gYXJyYXkgb2YgdW5zaWduZWQgaW50ZWdlcnMgdGhlIGxlbmd0aCBvZiBmcmVxdWVuY3lCaW5Db3VudFxuXHRjb25zb2xlLmxvZygnZGF0YUFycmF5OiAnLCBkYXRhQXJyYXkpO1xuXG5cdC8vIHRpbWVEb21haW4oY2FudmFzLCBjYW52YXNDdHgsIGFuYWx5c2VyLCBidWZmZXJMZW5ndGgsIGRhdGFBcnJheSk7XG5cdGZyZXF1ZW5jeURvbWFpbihjYW52YXMsIGNhbnZhc0N0eCwgYW5hbHlzZXIsIGJ1ZmZlckxlbmd0aCwgZGF0YUFycmF5KTtcbn1cblxuY29uc3QgdGltZURvbWFpbiA9IChjYW52YXMsIGNhbnZhc0N0eCwgYW5hbHlzZXIsIGJ1ZmZlckxlbmd0aCwgZGF0YUFycmF5KSA9PiB7XG5cblx0Y29uc3QgZHJhdyA9ICgpID0+IHtcblx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdyk7XG5cblx0XHRhbmFseXNlci5nZXRCeXRlVGltZURvbWFpbkRhdGEoZGF0YUFycmF5KTsgLy8gQ29waWVzIHRoZSBjdXJyZW50IGZyZXF1ZW5jeSBkYXRhIGludG8gdGhlIHVuc2lnbmVkIGJ5dGUgYXJyYXkgKFVpbnQ4QXJyYXkpIHBhc3NlZCBpblxuXHRcdGNvbnNvbGUubG9nKCdkYXRhQXJyYXk6ICcsIGRhdGFBcnJheSk7XG5cblx0XHRjYW52YXNDdHguZmlsbFN0eWxlID0gJ3JnYigyMDAsIDIwMCwgMjAwKSc7XG5cdFx0Y2FudmFzQ3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG5cblx0XHRjYW52YXNDdHgubGluZVdpZHRoID0gMjtcblx0XHRjYW52YXNDdHguc3Ryb2tlU3R5bGUgPSAncmdiKDAsIDAsIDApJzsgLy8gdGhpcyBjb3VsZCBpbmNyZW1lbnQgdG8gY2hhbmdlIHRoZSBjb2xvciBvZiB0aGUgbGluZSBhcyB0aGV5IHByb2dyZXNzXG5cblx0XHRsZXQgc2xpY2VXaWR0aCA9IGNhbnZhcy53aWR0aCAqIDEuMCAvIGJ1ZmZlckxlbmd0aDtcblx0XHRsZXQgeCA9IDA7XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlckxlbmd0aDsgaSsrKSB7XG5cdFx0XHRsZXQgdiA9IGRhdGFBcnJheVtpXSAvIDEyOC4wO1xuXHRcdFx0bGV0IHkgPSB2ICogY2FudmFzLmhlaWdodCAvIDI7XG5cblx0XHRcdGlmIChpID09PSAwKSB7XG5cdFx0XHRcdGNhbnZhc0N0eC5tb3ZlVG8oeCwgeSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjYW52YXNDdHgubGluZVRvKHgsIHkpO1xuXHRcdFx0fVxuXG5cdFx0XHR4ICs9IHNsaWNlV2lkdGg7XG5cdFx0fVxuXG5cdFx0Y2FudmFzQ3R4LmxpbmVUbyhjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQgLyAyKTtcblx0XHRjYW52YXNDdHguc3Ryb2tlKCk7XG5cdH1cblxuXHRkcmF3KCk7XG5cbn07XG5cbmNvbnN0IGZyZXF1ZW5jeURvbWFpbiA9IChjYW52YXMsIGNhbnZhc0N0eCwgYW5hbHlzZXIsIGJ1ZmZlckxlbmd0aCwgZGF0YUFycmF5KSA9PiB7XG5cdC8vIGNvbnNvbGUubG9nKCdkYXRhQXJyYXk6ICcsIGRhdGFBcnJheSk7XG5cdC8vIGFuYWx5c2VyLm1pbkRlY2liZWxzID0gLTkwO1xuXHQvLyBhbmFseXNlci5tYXhEZWNpYmVscyA9IC0xMDtcblxuXHRjYW52YXNDdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG5cblx0Y29uc3QgZHJhdyA9ICgpID0+IHtcblx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdyk7XG5cblx0XHRhbmFseXNlci5nZXRCeXRlRnJlcXVlbmN5RGF0YShkYXRhQXJyYXkpOyAvLyBDb3BpZXMgdGhlIGN1cnJlbnQgZnJlcXVlbmN5IGRhdGEgaW50byB0aGUgdW5zaWduZWQgYnl0ZSBhcnJheSAoVWludDhBcnJheSkgcGFzc2VkIGluXG5cblx0XHQvLyB0aGlzIGhhcHBlbnMgZXZlcnkgZnJhbWUuIFRoZSBkYXRhQXJyYXkgdXBkYXRlcyB3aXRoIHRoZSBzZXQgb2YgZnJlcXVlbmN5IGRhdGEgZm9yIGVhY2ggc2FtcGxlIGZyYW1lLCBhdCBlYWNoIHBvaW50IGluIHRpbWVcblx0XHQvLyBXZSB3b3VsZCB3YW50IHRvIHByb3ZpZGUgYSBzdHJlYW0gb2YgdGhpcyBkYXRhIHRvIExlYWZsZXQvZDNjb250b3VyIGluIG9yZGVyIHRvIGdldCBhIG1hcCB0aGF0IHJlZHJhd3MgZWFjaCBmcmFtZSBhcyB0aGUgc29uZy9hbmltYXRpb24gcHJvZ3Jlc3NlcyBpbiB0aW1lXG5cdFx0Y29uc29sZS5sb2coJ2RhdGFBcnJheTogJywgZGF0YUFycmF5KTtcblxuXHRcdGNhbnZhc0N0eC5maWxsU3R5bGUgPSAncmdiKDI1MywgMTk3LCAxOTApJztcblx0XHRjYW52YXNDdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblxuXHRcdGxldCBiYXJXaWR0aCA9IChjYW52YXMud2lkdGggLyBidWZmZXJMZW5ndGgpICogMi41IC0gMTsgLy8gYmFyIHdpZHRoIGNhbGN1bGF0ZWQgYXMgYSByYXRpbyBvZiBjYW52YXMgd2lkdGggLyBudW1iZXIgb2YgZGF0YSBwb2ludHMgKGZyZXF1ZW5jeSBkYXRhKTtcblx0XHRsZXQgYmFySGVpZ2h0O1xuXHRcdGxldCB4ID0gMDtcblxuXHRcdC8vIFRoaXMgbG9vcCByZWRyYXdzIHRoZSBjYW52YXMgaW4gZWFjaCBhbmltYXRpb24gZnJhbWVcblx0XHQvLyBJbnN0ZWFkIG9mIGRyYXdpbmcsIHdlIHdhbnQgdG8gdmlzdWFsaXplIHRoZSBkYXRhIHZpYSBkMywgYnV0IHdlIGxpa2VseSBzdGlsbCB3YW50IHRvIHVzZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgaW4gb3JkZXIgdG8gbWFrZSBhIHZpc3VhbGl6YXRpb24gdGhhdCBjaGFuZ2VzIG92ZXIgdGltZVxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyTGVuZ3RoOyBpKyspIHtcblx0XHRcdGJhckhlaWdodCA9IGRhdGFBcnJheVtpXTsgLy8gYmFySGVpZ2h0ID09PSBmcmVxdWVuY3kgZGF0YSBwb2ludFxuXG5cdFx0XHRjYW52YXNDdHguZmlsbFN0eWxlID0gJ3JnYignICsgYmFySGVpZ2h0ICsgJywgMTQwLCAxNDApJzsgLy8gc3R5bGUgYmFzZWQgb24gYmFyaGVpZ2h0XG5cdFx0XHRjYW52YXNDdHguZmlsbFJlY3QoeCwgY2FudmFzLmhlaWdodCAtIGJhckhlaWdodCAvIDIsIGJhcldpZHRoLCBiYXJIZWlnaHQgLyAyKTtcblxuXHRcdFx0eCArPSBiYXJXaWR0aDtcblx0XHR9XG5cdH07XG5cblx0ZHJhdygpO1xuXG59XG5cbmluaXQoKTsiXSwicHJlRXhpc3RpbmdDb21tZW50IjoiLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeUxYQmhZMnN2WDNCeVpXeDFaR1V1YW5NaUxDSnpjbU12YW5NdmFXNWtaWGd1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdPenRCUTBGQkxFbEJRVTBzVDBGQlR5eFRRVUZRTEVsQlFVOHNSMEZCVFR0QlFVTnNRaXhMUVVGTkxGRkJRVkVzU1VGQlNTeExRVUZLTEVWQlFXUTdRVUZEUVN4UFFVRk5MRWRCUVU0c1IwRkJXU3gxUTBGQldqdEJRVU5CTEU5QlFVMHNVVUZCVGl4SFFVRnBRaXhKUVVGcVFqdEJRVU5CTEZWQlFWTXNTVUZCVkN4RFFVRmpMRTFCUVdRc1EwRkJjVUlzUzBGQmNrSTdPMEZCUlVFc1MwRkJTU3hWUVVGVkxFdEJRVXNzVDBGQlR5eFpRVUZRTEVsQlFYVkNMRTlCUVU4c2EwSkJRVzVETEVkQlFXUTdRVUZEUVN4TFFVRkpMRmRCUVZjc1VVRkJVU3hqUVVGU0xFVkJRV1k3TzBGQlJVRXNVVUZCVHl4blFrRkJVQ3hEUVVGM1FpeE5RVUY0UWl4RlFVRm5ReXhaUVVGTk8wRkJRM1JETEUxQlFVa3NVMEZCVXl4UlFVRlJMSGRDUVVGU0xFTkJRV2xETEV0QlFXcERMRU5CUVdJN1FVRkRRU3hUUVVGUExFOUJRVkFzUTBGQlpTeFJRVUZtTzBGQlEwRXNWMEZCVXl4UFFVRlVMRU5CUVdsQ0xGRkJRVkVzVjBGQmVrSTdRVUZEUVN4RlFVcEJMRVZCU1VVc1MwRktSanM3UVVGTlFTeExRVUZOTEZOQlFWTXNVMEZCVXl4alFVRlVMRU5CUVhkQ0xGRkJRWGhDTEVOQlFXWTdRVUZEUVN4UlFVRlBMRTFCUVZBc1IwRkJaMElzUjBGQmFFSTdRVUZEUVN4UlFVRlBMRXRCUVZBc1IwRkJaU3hIUVVGbU8wRkJRMEVzUzBGQlRTeFpRVUZaTEU5QlFVOHNWVUZCVUN4RFFVRnJRaXhKUVVGc1FpeERRVUZzUWpzN1FVRkZRU3hWUVVGVExFOUJRVlFzUjBGQmJVSXNTVUZCYmtJc1EwRndRbXRDTEVOQmIwSlBPMEZCUTNwQ0xFdEJRVWtzWlVGQlpTeFRRVUZUTEdsQ1FVRTFRaXhEUVhKQ2EwSXNRMEZ4UWpaQ08wRkJReTlETzBGQlEwRXNTMEZCU1N4WlFVRlpMRWxCUVVrc1ZVRkJTaXhEUVVGbExGbEJRV1lzUTBGQmFFSXNRMEYyUW10Q0xFTkJkVUkwUWp0QlFVTTVReXhUUVVGUkxFZEJRVklzUTBGQldTeGhRVUZhTEVWQlFUSkNMRk5CUVROQ096dEJRVVZCTzBGQlEwRXNhVUpCUVdkQ0xFMUJRV2hDTEVWQlFYZENMRk5CUVhoQ0xFVkJRVzFETEZGQlFXNURMRVZCUVRaRExGbEJRVGRETEVWQlFUSkVMRk5CUVRORU8wRkJRMEVzUTBFMVFrUTdPMEZCT0VKQkxFbEJRVTBzWVVGQllTeFRRVUZpTEZWQlFXRXNRMEZCUXl4TlFVRkVMRVZCUVZNc1UwRkJWQ3hGUVVGdlFpeFJRVUZ3UWl4RlFVRTRRaXhaUVVFNVFpeEZRVUUwUXl4VFFVRTFReXhGUVVFd1JEczdRVUZGTlVVc1MwRkJUU3hQUVVGUExGTkJRVkFzU1VGQlR5eEhRVUZOTzBGQlEyeENMSGRDUVVGelFpeEpRVUYwUWpzN1FVRkZRU3hYUVVGVExIRkNRVUZVTEVOQlFTdENMRk5CUVM5Q0xFVkJTR3RDTEVOQlIzbENPMEZCUXpORExGVkJRVkVzUjBGQlVpeERRVUZaTEdGQlFWb3NSVUZCTWtJc1UwRkJNMEk3TzBGQlJVRXNXVUZCVlN4VFFVRldMRWRCUVhOQ0xHOUNRVUYwUWp0QlFVTkJMRmxCUVZVc1VVRkJWaXhEUVVGdFFpeERRVUZ1UWl4RlFVRnpRaXhEUVVGMFFpeEZRVUY1UWl4UFFVRlBMRXRCUVdoRExFVkJRWFZETEU5QlFVOHNUVUZCT1VNN08wRkJSVUVzV1VGQlZTeFRRVUZXTEVkQlFYTkNMRU5CUVhSQ08wRkJRMEVzV1VGQlZTeFhRVUZXTEVkQlFYZENMR05CUVhoQ0xFTkJWbXRDTEVOQlZYTkNPenRCUVVWNFF5eE5RVUZKTEdGQlFXRXNUMEZCVHl4TFFVRlFMRWRCUVdVc1IwRkJaaXhIUVVGeFFpeFpRVUYwUXp0QlFVTkJMRTFCUVVrc1NVRkJTU3hEUVVGU096dEJRVVZCTEU5QlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzU1VGQlNTeFpRVUZ3UWl4RlFVRnJReXhIUVVGc1F5eEZRVUYxUXp0QlFVTjBReXhQUVVGSkxFbEJRVWtzVlVGQlZTeERRVUZXTEVsQlFXVXNTMEZCZGtJN1FVRkRRU3hQUVVGSkxFbEJRVWtzU1VGQlNTeFBRVUZQTEUxQlFWZ3NSMEZCYjBJc1EwRkJOVUk3TzBGQlJVRXNUMEZCU1N4TlFVRk5MRU5CUVZZc1JVRkJZVHRCUVVOYUxHTkJRVlVzVFVGQlZpeERRVUZwUWl4RFFVRnFRaXhGUVVGdlFpeERRVUZ3UWp0QlFVTkJMRWxCUmtRc1RVRkZUenRCUVVOT0xHTkJRVlVzVFVGQlZpeERRVUZwUWl4RFFVRnFRaXhGUVVGdlFpeERRVUZ3UWp0QlFVTkJPenRCUVVWRUxGRkJRVXNzVlVGQlREdEJRVU5CT3p0QlFVVkVMRmxCUVZVc1RVRkJWaXhEUVVGcFFpeFBRVUZQTEV0QlFYaENMRVZCUVN0Q0xFOUJRVThzVFVGQlVDeEhRVUZuUWl4RFFVRXZRenRCUVVOQkxGbEJRVlVzVFVGQlZqdEJRVU5CTEVWQk9VSkVPenRCUVdkRFFUdEJRVVZCTEVOQmNFTkVPenRCUVhORFFTeEpRVUZOTEd0Q1FVRnJRaXhUUVVGc1FpeGxRVUZyUWl4RFFVRkRMRTFCUVVRc1JVRkJVeXhUUVVGVUxFVkJRVzlDTEZGQlFYQkNMRVZCUVRoQ0xGbEJRVGxDTEVWQlFUUkRMRk5CUVRWRExFVkJRVEJFTzBGQlEycEdPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeFhRVUZWTEZOQlFWWXNRMEZCYjBJc1EwRkJjRUlzUlVGQmRVSXNRMEZCZGtJc1JVRkJNRUlzVDBGQlR5eExRVUZxUXl4RlFVRjNReXhQUVVGUExFMUJRUzlET3p0QlFVVkJMRXRCUVUwc1QwRkJUeXhUUVVGUUxFbEJRVThzUjBGQlRUdEJRVU5zUWl4M1FrRkJjMElzU1VGQmRFSTdPMEZCUlVFc1YwRkJVeXh2UWtGQlZDeERRVUU0UWl4VFFVRTVRaXhGUVVoclFpeERRVWQzUWpzN1FVRkZNVU03UVVGRFFUdEJRVU5CTEZWQlFWRXNSMEZCVWl4RFFVRlpMR0ZCUVZvc1JVRkJNa0lzVTBGQk0wSTdPMEZCUlVFc1dVRkJWU3hUUVVGV0xFZEJRWE5DTEc5Q1FVRjBRanRCUVVOQkxGbEJRVlVzVVVGQlZpeERRVUZ0UWl4RFFVRnVRaXhGUVVGelFpeERRVUYwUWl4RlFVRjVRaXhQUVVGUExFdEJRV2hETEVWQlFYVkRMRTlCUVU4c1RVRkJPVU03TzBGQlJVRXNUVUZCU1N4WFFVRlpMRTlCUVU4c1MwRkJVQ3hIUVVGbExGbEJRV2hDTEVkQlFXZERMRWRCUVdoRExFZEJRWE5ETEVOQlFYSkVMRU5CV210Q0xFTkJXWE5ETzBGQlEzaEVMRTFCUVVrc2EwSkJRVW83UVVGRFFTeE5RVUZKTEVsQlFVa3NRMEZCVWpzN1FVRkZRVHRCUVVOQk8wRkJRMEVzVDBGQlN5eEpRVUZKTEVsQlFVa3NRMEZCWWl4RlFVRm5RaXhKUVVGSkxGbEJRWEJDTEVWQlFXdERMRWRCUVd4RExFVkJRWFZETzBGQlEzUkRMR1ZCUVZrc1ZVRkJWU3hEUVVGV0xFTkJRVm9zUTBGRWMwTXNRMEZEV2pzN1FVRkZNVUlzWVVGQlZTeFRRVUZXTEVkQlFYTkNMRk5CUVZNc1UwRkJWQ3hIUVVGeFFpeGhRVUV6UXl4RFFVaHpReXhEUVVkdlFqdEJRVU14UkN4aFFVRlZMRkZCUVZZc1EwRkJiVUlzUTBGQmJrSXNSVUZCYzBJc1QwRkJUeXhOUVVGUUxFZEJRV2RDTEZsQlFWa3NRMEZCYkVRc1JVRkJjVVFzVVVGQmNrUXNSVUZCSzBRc1dVRkJXU3hEUVVFelJUczdRVUZGUVN4UlFVRkxMRkZCUVV3N1FVRkRRVHRCUVVORUxFVkJNVUpFT3p0QlFUUkNRVHRCUVVWQkxFTkJja05FT3p0QlFYVkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUtHWjFibU4wYVc5dUtDbDdablZ1WTNScGIyNGdjaWhsTEc0c2RDbDdablZ1WTNScGIyNGdieWhwTEdZcGUybG1LQ0Z1VzJsZEtYdHBaaWdoWlZ0cFhTbDdkbUZ5SUdNOVhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdjbVZ4ZFdseVpTWW1jbVZ4ZFdseVpUdHBaaWdoWmlZbVl5bHlaWFIxY200Z1l5aHBMQ0V3S1R0cFppaDFLWEpsZEhWeWJpQjFLR2tzSVRBcE8zWmhjaUJoUFc1bGR5QkZjbkp2Y2loY0lrTmhibTV2ZENCbWFXNWtJRzF2WkhWc1pTQW5YQ0lyYVN0Y0lpZGNJaWs3ZEdoeWIzY2dZUzVqYjJSbFBWd2lUVTlFVlV4RlgwNVBWRjlHVDFWT1JGd2lMR0Y5ZG1GeUlIQTlibHRwWFQxN1pYaHdiM0owY3pwN2ZYMDdaVnRwWFZzd1hTNWpZV3hzS0hBdVpYaHdiM0owY3l4bWRXNWpkR2x2YmloeUtYdDJZWElnYmoxbFcybGRXekZkVzNKZE8zSmxkSFZ5YmlCdktHNThmSElwZlN4d0xIQXVaWGh3YjNKMGN5eHlMR1VzYml4MEtYMXlaWFIxY200Z2JsdHBYUzVsZUhCdmNuUnpmV1p2Y2loMllYSWdkVDFjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCeVpYRjFhWEpsSmlaeVpYRjFhWEpsTEdrOU1EdHBQSFF1YkdWdVozUm9PMmtyS3lsdktIUmJhVjBwTzNKbGRIVnliaUJ2ZlhKbGRIVnliaUJ5ZlNrb0tTSXNJbU52Ym5OMElHbHVhWFFnUFNBb0tTQTlQaUI3WEc1Y2RHTnZibk4wSUdGMVpHbHZJRDBnYm1WM0lFRjFaR2x2S0NrN1hHNWNkR0YxWkdsdkxuTnlZeUE5SUNjdUxpOHVMaTloYzNObGRITXZZWFZrYVc4dmFTMWlkV2xzZEMxMWRHOXdhV0V1YlhBekp6dGNibHgwWVhWa2FXOHVZMjl1ZEhKdmJITWdQU0IwY25WbE8xeHVYSFJrYjJOMWJXVnVkQzVpYjJSNUxtRndjR1Z1WkNoaGRXUnBieWs3WEc1Y2JseDBiR1YwSUdOdmJuUmxlSFFnUFNCdVpYY2dLSGRwYm1SdmR5NUJkV1JwYjBOdmJuUmxlSFFnZkh3Z2QybHVaRzkzTG5kbFltdHBkRUYxWkdsdlEyOXVkR1Y0ZENrb0tUdGNibHgwYkdWMElHRnVZV3g1YzJWeUlEMGdZMjl1ZEdWNGRDNWpjbVZoZEdWQmJtRnNlWE5sY2lncE8xeHVYRzVjZEhkcGJtUnZkeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RzYjJGa0p5d2dLQ2tnUFQ0Z2UxeHVYSFJzWlhRZ2MyOTFjbU5sSUQwZ1kyOXVkR1Y0ZEM1amNtVmhkR1ZOWldScFlVVnNaVzFsYm5SVGIzVnlZMlVvWVhWa2FXOHBPMXh1WEhSemIzVnlZMlV1WTI5dWJtVmpkQ2hoYm1Gc2VYTmxjaWs3WEc1Y2RHRnVZV3g1YzJWeUxtTnZibTVsWTNRb1kyOXVkR1Y0ZEM1a1pYTjBhVzVoZEdsdmJpazdYRzU5TENCbVlXeHpaU2s3WEc1Y2JseDBZMjl1YzNRZ1kyRnVkbUZ6SUQwZ1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvSjJOaGJuWmhjeWNwTzF4dVhIUmpZVzUyWVhNdWFHVnBaMmgwSUQwZ05EQXdPMXh1WEhSallXNTJZWE11ZDJsa2RHZ2dQU0EwTURBN1hHNWNkR052Ym5OMElHTmhiblpoYzBOMGVDQTlJR05oYm5aaGN5NW5aWFJEYjI1MFpYaDBLQ2N5WkNjcE8xeHVYRzVjZEdGdVlXeDVjMlZ5TG1abWRGTnBlbVVnUFNBeE1ESTBPeUF2THlCemFYcGxJRzltSUVaaGMzUWdSbTkxY21sbGNpQlVjbUZ1YzJadmNtMGdkWE5sWkNCMGJ5Qm5aWFFnWm5KbGNYVmxibU41SUdSdmJXRnBiaUJrWVhSaElDaGtaWFJsY20xcGJtVnpJSGRwYm1SdmR5QnphWHBsS1Z4dVhIUnNaWFFnWW5WbVptVnlUR1Z1WjNSb0lEMGdZVzVoYkhselpYSXVabkpsY1hWbGJtTjVRbWx1UTI5MWJuUTdJQzh2SUdoaGJHWWdkR2hsSUdabWRGTnBlbVVnTFNCMGFHVWdiblZ0WW1WeUlHOW1JR1JoZEdFZ2NHOXBiblJ6SUdGMllXbHNZV0pzWlNCbWIzSWdkbWx6ZFdGc2FYcGhkR2x2Ymx4dVhIUXZMeUJpZFdabVpYSWdhWE1nZEdobElHRnpjMlYwSUdsdUlHMWxiVzl5ZVNCMGFHRjBJR2h2YkdSeklHRjFaR2x2SUdSaGRHRmNibHgwYkdWMElHUmhkR0ZCY25KaGVTQTlJRzVsZHlCVmFXNTBPRUZ5Y21GNUtHSjFabVpsY2t4bGJtZDBhQ2s3SUM4dklHRnVJR0Z5Y21GNUlHOW1JSFZ1YzJsbmJtVmtJR2x1ZEdWblpYSnpJSFJvWlNCc1pXNW5kR2dnYjJZZ1puSmxjWFZsYm1ONVFtbHVRMjkxYm5SY2JseDBZMjl1YzI5c1pTNXNiMmNvSjJSaGRHRkJjbkpoZVRvZ0p5d2daR0YwWVVGeWNtRjVLVHRjYmx4dVhIUXZMeUIwYVcxbFJHOXRZV2x1S0dOaGJuWmhjeXdnWTJGdWRtRnpRM1I0TENCaGJtRnNlWE5sY2l3Z1luVm1abVZ5VEdWdVozUm9MQ0JrWVhSaFFYSnlZWGtwTzF4dVhIUm1jbVZ4ZFdWdVkzbEViMjFoYVc0b1kyRnVkbUZ6TENCallXNTJZWE5EZEhnc0lHRnVZV3g1YzJWeUxDQmlkV1ptWlhKTVpXNW5kR2dzSUdSaGRHRkJjbkpoZVNrN1hHNTlYRzVjYm1OdmJuTjBJSFJwYldWRWIyMWhhVzRnUFNBb1kyRnVkbUZ6TENCallXNTJZWE5EZEhnc0lHRnVZV3g1YzJWeUxDQmlkV1ptWlhKTVpXNW5kR2dzSUdSaGRHRkJjbkpoZVNrZ1BUNGdlMXh1WEc1Y2RHTnZibk4wSUdSeVlYY2dQU0FvS1NBOVBpQjdYRzVjZEZ4MGNtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxLR1J5WVhjcE8xeHVYRzVjZEZ4MFlXNWhiSGx6WlhJdVoyVjBRbmwwWlZScGJXVkViMjFoYVc1RVlYUmhLR1JoZEdGQmNuSmhlU2s3SUM4dklFTnZjR2xsY3lCMGFHVWdZM1Z5Y21WdWRDQm1jbVZ4ZFdWdVkza2daR0YwWVNCcGJuUnZJSFJvWlNCMWJuTnBaMjVsWkNCaWVYUmxJR0Z5Y21GNUlDaFZhVzUwT0VGeWNtRjVLU0J3WVhOelpXUWdhVzVjYmx4MFhIUmpiMjV6YjJ4bExteHZaeWduWkdGMFlVRnljbUY1T2lBbkxDQmtZWFJoUVhKeVlYa3BPMXh1WEc1Y2RGeDBZMkZ1ZG1GelEzUjRMbVpwYkd4VGRIbHNaU0E5SUNkeVoySW9NakF3TENBeU1EQXNJREl3TUNrbk8xeHVYSFJjZEdOaGJuWmhjME4wZUM1bWFXeHNVbVZqZENnd0xDQXdMQ0JqWVc1MllYTXVkMmxrZEdnc0lHTmhiblpoY3k1b1pXbG5hSFFwTzF4dVhHNWNkRngwWTJGdWRtRnpRM1I0TG14cGJtVlhhV1IwYUNBOUlESTdYRzVjZEZ4MFkyRnVkbUZ6UTNSNExuTjBjbTlyWlZOMGVXeGxJRDBnSjNKbllpZ3dMQ0F3TENBd0tTYzdJQzh2SUhSb2FYTWdZMjkxYkdRZ2FXNWpjbVZ0Wlc1MElIUnZJR05vWVc1blpTQjBhR1VnWTI5c2IzSWdiMllnZEdobElHeHBibVVnWVhNZ2RHaGxlU0J3Y205bmNtVnpjMXh1WEc1Y2RGeDBiR1YwSUhOc2FXTmxWMmxrZEdnZ1BTQmpZVzUyWVhNdWQybGtkR2dnS2lBeExqQWdMeUJpZFdabVpYSk1aVzVuZEdnN1hHNWNkRngwYkdWMElIZ2dQU0F3TzF4dVhHNWNkRngwWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCaWRXWm1aWEpNWlc1bmRHZzdJR2tyS3lrZ2UxeHVYSFJjZEZ4MGJHVjBJSFlnUFNCa1lYUmhRWEp5WVhsYmFWMGdMeUF4TWpndU1EdGNibHgwWEhSY2RHeGxkQ0I1SUQwZ2RpQXFJR05oYm5aaGN5NW9aV2xuYUhRZ0x5QXlPMXh1WEc1Y2RGeDBYSFJwWmlBb2FTQTlQVDBnTUNrZ2UxeHVYSFJjZEZ4MFhIUmpZVzUyWVhORGRIZ3ViVzkyWlZSdktIZ3NJSGtwTzF4dVhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwWTJGdWRtRnpRM1I0TG14cGJtVlVieWg0TENCNUtUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBlQ0FyUFNCemJHbGpaVmRwWkhSb08xeHVYSFJjZEgxY2JseHVYSFJjZEdOaGJuWmhjME4wZUM1c2FXNWxWRzhvWTJGdWRtRnpMbmRwWkhSb0xDQmpZVzUyWVhNdWFHVnBaMmgwSUM4Z01pazdYRzVjZEZ4MFkyRnVkbUZ6UTNSNExuTjBjbTlyWlNncE8xeHVYSFI5WEc1Y2JseDBaSEpoZHlncE8xeHVYRzU5TzF4dVhHNWpiMjV6ZENCbWNtVnhkV1Z1WTNsRWIyMWhhVzRnUFNBb1kyRnVkbUZ6TENCallXNTJZWE5EZEhnc0lHRnVZV3g1YzJWeUxDQmlkV1ptWlhKTVpXNW5kR2dzSUdSaGRHRkJjbkpoZVNrZ1BUNGdlMXh1WEhRdkx5QmpiMjV6YjJ4bExteHZaeWduWkdGMFlVRnljbUY1T2lBbkxDQmtZWFJoUVhKeVlYa3BPMXh1WEhRdkx5QmhibUZzZVhObGNpNXRhVzVFWldOcFltVnNjeUE5SUMwNU1EdGNibHgwTHk4Z1lXNWhiSGx6WlhJdWJXRjRSR1ZqYVdKbGJITWdQU0F0TVRBN1hHNWNibHgwWTJGdWRtRnpRM1I0TG1Oc1pXRnlVbVZqZENnd0xDQXdMQ0JqWVc1MllYTXVkMmxrZEdnc0lHTmhiblpoY3k1b1pXbG5hSFFwTzF4dVhHNWNkR052Ym5OMElHUnlZWGNnUFNBb0tTQTlQaUI3WEc1Y2RGeDBjbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsS0dSeVlYY3BPMXh1WEc1Y2RGeDBZVzVoYkhselpYSXVaMlYwUW5sMFpVWnlaWEYxWlc1amVVUmhkR0VvWkdGMFlVRnljbUY1S1RzZ0x5OGdRMjl3YVdWeklIUm9aU0JqZFhKeVpXNTBJR1p5WlhGMVpXNWplU0JrWVhSaElHbHVkRzhnZEdobElIVnVjMmxuYm1Wa0lHSjVkR1VnWVhKeVlYa2dLRlZwYm5RNFFYSnlZWGtwSUhCaGMzTmxaQ0JwYmx4dVhHNWNkRngwTHk4Z2RHaHBjeUJvWVhCd1pXNXpJR1YyWlhKNUlHWnlZVzFsTGlCVWFHVWdaR0YwWVVGeWNtRjVJSFZ3WkdGMFpYTWdkMmwwYUNCMGFHVWdjMlYwSUc5bUlHWnlaWEYxWlc1amVTQmtZWFJoSUdadmNpQmxZV05vSUhOaGJYQnNaU0JtY21GdFpTd2dZWFFnWldGamFDQndiMmx1ZENCcGJpQjBhVzFsWEc1Y2RGeDBMeThnVjJVZ2QyOTFiR1FnZDJGdWRDQjBieUJ3Y205MmFXUmxJR0VnYzNSeVpXRnRJRzltSUhSb2FYTWdaR0YwWVNCMGJ5Qk1aV0ZtYkdWMEwyUXpZMjl1ZEc5MWNpQnBiaUJ2Y21SbGNpQjBieUJuWlhRZ1lTQnRZWEFnZEdoaGRDQnlaV1J5WVhkeklHVmhZMmdnWm5KaGJXVWdZWE1nZEdobElITnZibWN2WVc1cGJXRjBhVzl1SUhCeWIyZHlaWE56WlhNZ2FXNGdkR2x0WlZ4dVhIUmNkR052Ym5OdmJHVXViRzluS0Nka1lYUmhRWEp5WVhrNklDY3NJR1JoZEdGQmNuSmhlU2s3WEc1Y2JseDBYSFJqWVc1MllYTkRkSGd1Wm1sc2JGTjBlV3hsSUQwZ0ozSm5ZaWd5TlRNc0lERTVOeXdnTVRrd0tTYzdYRzVjZEZ4MFkyRnVkbUZ6UTNSNExtWnBiR3hTWldOMEtEQXNJREFzSUdOaGJuWmhjeTUzYVdSMGFDd2dZMkZ1ZG1GekxtaGxhV2RvZENrN1hHNWNibHgwWEhSc1pYUWdZbUZ5VjJsa2RHZ2dQU0FvWTJGdWRtRnpMbmRwWkhSb0lDOGdZblZtWm1WeVRHVnVaM1JvS1NBcUlESXVOU0F0SURFN0lDOHZJR0poY2lCM2FXUjBhQ0JqWVd4amRXeGhkR1ZrSUdGeklHRWdjbUYwYVc4Z2IyWWdZMkZ1ZG1GeklIZHBaSFJvSUM4Z2JuVnRZbVZ5SUc5bUlHUmhkR0VnY0c5cGJuUnpJQ2htY21WeGRXVnVZM2tnWkdGMFlTazdYRzVjZEZ4MGJHVjBJR0poY2tobGFXZG9kRHRjYmx4MFhIUnNaWFFnZUNBOUlEQTdYRzVjYmx4MFhIUXZMeUJVYUdseklHeHZiM0FnY21Wa2NtRjNjeUIwYUdVZ1kyRnVkbUZ6SUdsdUlHVmhZMmdnWVc1cGJXRjBhVzl1SUdaeVlXMWxYRzVjZEZ4MEx5OGdTVzV6ZEdWaFpDQnZaaUJrY21GM2FXNW5MQ0IzWlNCM1lXNTBJSFJ2SUhacGMzVmhiR2w2WlNCMGFHVWdaR0YwWVNCMmFXRWdaRE1zSUdKMWRDQjNaU0JzYVd0bGJIa2djM1JwYkd3Z2QyRnVkQ0IwYnlCMWMyVWdjbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsSUdsdUlHOXlaR1Z5SUhSdklHMWhhMlVnWVNCMmFYTjFZV3hwZW1GMGFXOXVJSFJvWVhRZ1kyaGhibWRsY3lCdmRtVnlJSFJwYldWY2JseDBYSFJtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdKMVptWmxja3hsYm1kMGFEc2dhU3NyS1NCN1hHNWNkRngwWEhSaVlYSklaV2xuYUhRZ1BTQmtZWFJoUVhKeVlYbGJhVjA3SUM4dklHSmhja2hsYVdkb2RDQTlQVDBnWm5KbGNYVmxibU41SUdSaGRHRWdjRzlwYm5SY2JseHVYSFJjZEZ4MFkyRnVkbUZ6UTNSNExtWnBiR3hUZEhsc1pTQTlJQ2R5WjJJb0p5QXJJR0poY2tobGFXZG9kQ0FySUNjc0lERTBNQ3dnTVRRd0tTYzdJQzh2SUhOMGVXeGxJR0poYzJWa0lHOXVJR0poY21obGFXZG9kRnh1WEhSY2RGeDBZMkZ1ZG1GelEzUjRMbVpwYkd4U1pXTjBLSGdzSUdOaGJuWmhjeTVvWldsbmFIUWdMU0JpWVhKSVpXbG5hSFFnTHlBeUxDQmlZWEpYYVdSMGFDd2dZbUZ5U0dWcFoyaDBJQzhnTWlrN1hHNWNibHgwWEhSY2RIZ2dLejBnWW1GeVYybGtkR2c3WEc1Y2RGeDBmVnh1WEhSOU8xeHVYRzVjZEdSeVlYY29LVHRjYmx4dWZWeHVYRzVwYm1sMEtDazdJbDE5In0=
